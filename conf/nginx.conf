### 全局 开始 ###
# 指定可运行nginx的用户和用户组
#user user group;
#user nginx;
# 如果想所有用户都可运行nginx,直接注释掉或者设置为nobody即可
# user nobody;

# 工作进程数,是实现并发的关键
#worker_processes number | auto;
worker_processes auto;
# 使用auto时会自动分配一个合适该系统的进程数

# 配置错误路径并设定输出级别为error
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
error_log logs/error.log error;

# 保存主进程号的PID文件
pid logs/nginx.pid;
# 使用相对路径和绝对路径均可
### 全局 结束 ###

### events 开始 ###
events {
    # 事件驱动模型epoll
    use epoll;
    # 最大连接数
    worker_connections 1024;
}
### events 开始 ###

### http 开始 ###
http {
    # 定义MIME-type
    include mime.types;
    default_type application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    # 配置请求处理的日志格式
    log_format access.log  '$remote_addr - [$time_local] - "$request" - "$http_user_agent"';
    #access_log  logs/access.log  main;

    # 允许发送文件
    sendfile        on;
    #tcp_nopush     on;

    # 配置连接超时时间
    keepalive_timeout  120;

    #gzip  on;

    ### server 开始 ###
    server {
        # 配置监听端口和主机名(基于名称, 本实例中对应的IP是: 192.168.245.128 )
        listen       8080;
        server_name  www.server1.com;

        #charset koi8-r;

        # 配置请求日志处理页面
        #access_log  logs/host.access.log  main;
        access_log /myweb/server1/log/access_log;

        # 配置server1-location1请求的location
        location /server1/location1 {
            root   /myweb;
            index  index_svr1_loc1.html;
        }
        # 配置server1-location2请求的location
        location /server1/location2 {
            root   /myweb;
            index  index_svr1_loc2.html;
        }

        #error_page  404              /404.html;
        error_page 404 /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # error_page   500 502 503 504  /50x.html;
        # location = /50x.html {
        #     root   html;
        # }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        # 配置监听端口和主机名(基于IP,本实例中对应的主机名是:www.server2.com)
        listen       8090;
        server_name  192.168.245.129;

        #charset koi8-r;

        # 配置请求日志处理页面
        #access_log  logs/host.access.log  main;
        access_log /myweb/server2/log/access_log;

        # 配置server2-location1请求的location
        location /server2/location1 {
            root   /myweb;
            index  index_svr2_loc1.html;
        }
        # 配置server2-location2请求的location,并更改URI
        location /svr2/loc2 {
            alias  /myweb/server2/location2/;
            index  index_svr2_loc2.html;
        }

        #error_page  404              /404.html;
        error_page 404 /404.html;
        # 对错误页面进行重定向
        location = /404.html {
            root /myweb/;
            index 404.html;
        }

    }
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    ### server 开始 ###
}
### http 结束 ###
